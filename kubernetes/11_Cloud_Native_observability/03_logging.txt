==============================
Logging in Cloud Native Systems
==============================

What is Logging?
----------------
Logging is the practice of recording messages generated by applications or systems that describe events, errors, or general information about operations.
These logs help developers and operators understand what is happening inside applications and infrastructure.

Logging Basics
--------------
- Modern programming languages and frameworks come with built-in logging capabilities with different severity levels:
  - DEBUG, INFO, WARNING, ERROR, etc.
- Logs can include anything from simple status messages to detailed error reports.
- Example in Python:

  import logging
  logging.basicConfig(filename='example.log', encoding='utf-8', level=logging.DEBUG)
  logging.debug('Debug message')
  logging.info('Informational message')
  logging.warning('Warning message')
  logging.error('Error message with special chars like Ã˜resund')

Logs & Standard Streams in Containers
------------------------------------
- Applications typically write logs to:
  - stdout (standard output) for normal logs
  - stderr (standard error) for error logs
- Container tools like Docker or Kubernetes can capture and display logs from these streams.
- Example commands:
  - docker logs <container-name>
  - kubectl logs <pod-name> (with options like -f for streaming, --tail for recent lines, --since for time-based logs)

Challenges in Distributed Systems
---------------------------------
- In modern microservices and container orchestration environments, there may be hundreds or thousands of containers generating logs.
- Accessing logs by connecting to individual containers is inefficient and impractical.

Centralized Log Collection & Shipping
-------------------------------------
To handle large-scale logs, logs must be collected and shipped to centralized storage systems. Common methods:

1. Node-level logging:
   - A log collector runs on each node and gathers logs from all containers on that node.
   - Tools: Fluentd, Filebeat.
   - Most efficient and commonly used.

2. Sidecar container logging:
   - A dedicated container runs alongside the application container to collect and ship logs.

3. Application-level logging:
   - Applications send logs directly to a central logging service or database.
   - Less common due to complexity in configuring many applications.

Popular Log Storage Solutions
-----------------------------
- OpenSearch (formerly part of Elastic Stack)
- Grafana Loki (optimized for logs in Kubernetes environments)

Structured Logging
------------------
- Logs should be stored in a structured format such as JSON rather than plain text.
- Structured logs are easier to search, filter, analyze, and correlate.
- Cloud providers offer guidance on structured logging for better observability:
  - Google Cloud: Structured logging documentation
  - Microsoft Azure: Structured logging documentation

Summary
-------
Logging is fundamental for understanding and troubleshooting applications, especially in cloud native, containerized environments.
Using centralized logging, streaming logs, and structured logging makes the process scalable, efficient, and effective.